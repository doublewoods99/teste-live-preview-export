import express from 'express';
import puppeteer from 'puppeteer';
import cors from 'cors';

const app = express();
const PORT = 3001;

// Middleware
app.use(cors());
app.use(express.json({ limit: '10mb' })); // Allow large HTML content

// Global browser instance
let browser = null;

// Initialize Puppeteer browser
async function initBrowser() {
  try {
    console.log('🎭 Initializing Puppeteer browser...');
    browser = await puppeteer.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-accelerated-2d-canvas',
        '--no-first-run',
        '--no-zygote',
        '--disable-gpu'
      ]
    });
    console.log('✅ Puppeteer browser initialized');
  } catch (error) {
    console.error('❌ Failed to initialize browser:', error);
    process.exit(1);
  }
}

// Health check endpoint
app.get('/health', (req, res) => {
  const isConnected = browser && browser.isConnected();
  res.json({
    status: 'OK',
    message: 'Resume PDF Generator Server',
    timestamp: new Date().toISOString(),
    browserConnected: isConnected
  });
});

// Main PDF generation endpoint
app.post('/generate-pdf', async (req, res) => {
  console.log('🎯 Received PDF generation request');
  
  try {
    const { htmlContent, filename = 'resume.pdf' } = req.body;
    
    if (!htmlContent) {
      return res.status(400).json({ 
        error: 'HTML content is required',
        message: 'Please provide htmlContent in the request body'
      });
    }

    if (!browser || !browser.isConnected()) {
      console.log('🔄 Browser disconnected, reinitializing...');
      await initBrowser();
    }

    // Create a new page
    const page = await browser.newPage();
    
    try {
      console.log('📄 Setting HTML content in Puppeteer...');
      
      // Set the HTML content (this is the exact Preview output!)
      await page.setContent(htmlContent, {
        waitUntil: ['load', 'networkidle0'],
        timeout: 30000
      });

      console.log('🎨 Generating PDF...');
      
      // Generate PDF with A4 settings to match our layout
      const pdfBuffer = await page.pdf({
        format: 'A4',
        printBackground: true,
        margin: {
          top: '0px',
          right: '0px', 
          bottom: '0px',
          left: '0px'
        },
        preferCSSPageSize: true,
        displayHeaderFooter: false,
        scale: 1
      });

      console.log('✅ PDF generated successfully');

      // Set response headers for PDF download
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
      res.setHeader('Content-Length', pdfBuffer.length);
      
      // Send the PDF
      res.send(pdfBuffer);

    } catch (pageError) {
      console.error('❌ Page processing error:', pageError);
      throw pageError;
    } finally {
      // Always close the page
      await page.close();
      console.log('🧹 Page closed');
    }

  } catch (error) {
    console.error('❌ PDF generation failed:', error);
    res.status(500).json({ 
      error: 'PDF generation failed', 
      message: error.message 
    });
  }
});

// Test endpoint with sample content
app.post('/test-pdf', async (req, res) => {
  console.log('🧪 Test PDF generation request');
  
  const sampleHTML = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Test PDF</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1 { color: #333; }
        p { line-height: 1.6; }
      </style>
    </head>
    <body>
      <h1>Puppeteer Test PDF</h1>
      <p>This is a test PDF generated by Puppeteer server.</p>
      <p>Timestamp: ${new Date().toISOString()}</p>
      <p>If you can see this, the server is working correctly!</p>
    </body>
    </html>
  `;

  try {
    if (!browser || !browser.isConnected()) {
      console.log('🔄 Browser disconnected, reinitializing...');
      await initBrowser();
    }

    const page = await browser.newPage();
    
    try {
      console.log('📄 Setting test HTML content...');
      
      await page.setContent(sampleHTML, {
        waitUntil: ['load', 'networkidle0'],
        timeout: 30000
      });

      console.log('🎨 Generating test PDF...');
      
      const pdfBuffer = await page.pdf({
        format: 'A4',
        printBackground: true,
        margin: {
          top: '20px',
          right: '20px', 
          bottom: '20px',
          left: '20px'
        }
      });

      console.log('✅ Test PDF generated successfully');

      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', 'attachment; filename="test-puppeteer.pdf"');
      res.setHeader('Content-Length', pdfBuffer.length);
      
      res.send(pdfBuffer);

    } finally {
      await page.close();
      console.log('🧹 Test page closed');
    }

  } catch (error) {
    console.error('❌ Test PDF generation failed:', error);
    res.status(500).json({ 
      error: 'Test failed', 
      message: error.message 
    });
  }
});

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\n🛑 Shutting down server...');
  if (browser) {
    await browser.close();
    console.log('🧹 Browser closed');
  }
  process.exit(0);
});

// Start server
async function startServer() {
  await initBrowser();
  
  app.listen(PORT, () => {
    console.log(`🚀 Resume PDF Generator Server running on http://localhost:${PORT}`);
    console.log(`📊 Health check: http://localhost:${PORT}/health`);
    console.log(`🧪 Test endpoint: http://localhost:${PORT}/test-pdf`);
  });
}

startServer().catch(console.error); 